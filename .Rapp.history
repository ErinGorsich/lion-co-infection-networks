###################################################
# 1) packages and files#
###################################################
setwd("~/Documents/post-doc/2009-2011 comparison final/paperdrafts2- MxSim/Manuscript drafts/draft2_toColleen/draft3_toTomKatieRyan/draft_toUSDA_andFinalCollaboratorRound/Draft_to_DHS/draft_ColleenComments/figures")#
library(maps)#
library(ggplot2)#
import<- read.csv("~/Documents/post-doc/2009-2011 comparison final/paperdrafts2- MxSim/Manuscript drafts/draft2_toColleen/2009_2011imports_all.csv")
ggplot(d, aes(x=volume)) + #
	geom_histogram(data=d, fill= "gray", alpha=0.3, #steelblue, steelblue4#
		colour = "dimgray", stat="bin", binwidth= 1, linetype = 1, size = 2) + #
	theme_bw()+ #
	xlab("Age (years)")+ ylab("Number of buffalo")+#
	theme(panel.border = element_blank(), #
        panel.margin = element_blank(),#
        panel.grid.major= element_blank(),#
        panel.grid.minor= element_blank()) + #
	theme(axis.line.x = element_line(colour= "black", size = 2), #
		axis.line.y = element_line(colour= "black", size = 2)) + #
	theme(axis.title = element_blank(), axis.text = element_blank())
d <- data.frame(volume = log(import$mean_cattle))
ggplot(d, aes(x=volume)) + #
	geom_histogram(data=d, fill= "gray", alpha=0.3, #steelblue, steelblue4#
		colour = "dimgray", stat="bin", binwidth= 1, linetype = 1, size = 2) + #
	theme_bw()+ #
	xlab("Age (years)")+ ylab("Number of buffalo")+#
	theme(panel.border = element_blank(), #
        panel.margin = element_blank(),#
        panel.grid.major= element_blank(),#
        panel.grid.minor= element_blank()) + #
	theme(axis.line.x = element_line(colour= "black", size = 2), #
		axis.line.y = element_line(colour= "black", size = 2)) + #
	theme(axis.title = element_blank(), axis.text = element_blank())
png("import_volumes.png", width = 800, height = 800, units = "px")#
ggplot(d, aes(x=volume)) + #
	geom_histogram(data=d, fill= "gray44", alpha=0.3, #steelblue, steelblue4#
		colour = "gray20", stat="bin", binwidth= 1, linetype = 1, size = 2.5) + #
	theme_bw()+ #
	xlab("Age (years)")+ ylab("Number of buffalo")+#
	theme(panel.border = element_blank(), #
        panel.margin = element_blank(),#
        panel.grid.major= element_blank(),#
        panel.grid.minor= element_blank()) +#
	theme(axis.line.x = element_line(colour= "black", size = 3), #
		axis.line.y = element_line(colour= "black", size = 3)) + #
	theme(axis.title = element_blank(), axis.text = element_blank())#
dev.off()
png("import_volumes.png", width = 800, height = 800, units = "px")#
ggplot(d, aes(x=volume)) + #
	geom_histogram(data=d, fill= "gray44", alpha=0.3, #steelblue, steelblue4#
		colour = "gray20", stat="bin", binwidth= 1, linetype = 1, size = 3) + #
	theme_bw()+ #
	xlab("Age (years)")+ ylab("Number of buffalo")+#
	theme(panel.border = element_blank(), #
        panel.margin = element_blank(),#
        panel.grid.major= element_blank(),#
        panel.grid.minor= element_blank()) +#
	theme(axis.line.x = element_line(colour= "black", size = 3), #
		axis.line.y = element_line(colour= "black", size = 3)) + #
	theme(axis.title = element_blank(), axis.text = element_blank())#
dev.off()
ctname=map('county', plot=F)$names#
ctname=as.character(ctname)#
color.df<-data.frame(ctname=ctname)#
data(county.fips)#
color.df$fips<-county.fips$fips[match(color.df$ctname, county.fips$polyname)]#
#
# columns defining import locations#
color.df$origin.ind2009 <- 0 #
color.df$origin.ind2011 <- 0#
fips09 <- import$FIPS[import$ships09 > 0]#
fips11<- import$FIPS[import$ships11 > 0]#
color.df$origin.ind2009[color.df$fips %in% fips09] <- 1#
color.df$origin.ind2011[color.df$fips %in% fips11] <- 1#
#
color.df$color <- NA#
color.df$color[color.df$origin.ind2009 ==1 & color.df$origin.ind2011 == 0] <- "#763636" #"#fee0d2"  # 2009 only #
color.df$color[color.df$origin.ind2009 == 0 & color.df$origin.ind2011 == 1] <- "#2A3132"  #"#fc9272"  # 2010 only #
color.df$color[color.df$origin.ind2009==1 & color.df$origin.ind2011 ==1] <- "#336B87" #"#de2d26"  # both #
color.df$color[is.na(color.df$color)]<-"white"
map('county', fill = T, col = color.df$color, lty = 0, mar = c(2,1.5, 2, 7), resolution = 0)#
#map('county', fill=F, col="dark gray", lwd=0.3,add=T, resolution=0); #
map('state' , col='black',lwd=0.5,add=T, resolution=0)
?map
map('county', fill = T, col = color.df$color, lty = 0, mar = c(2,1.5, 2, 7), resolution = 0)#
#map('county', fill=F, col="dark gray", lwd=0.3,add=T, resolution=0); #
map('state' , col='black',lwd=2,add=T, resolution=0)
tiff(filename="conceptual_VSPS_locations.tiff", height=65, width=120, units="mm", res=600, compression="lzw")#
map('county', fill = T, col = color.df$color, lty = 0, mar = c(2,1.5, 2, 7), resolution = 0)#
#map('county', fill=F, col="dark gray", lwd=0.3,add=T, resolution=0); #
map('state' , col='black',lwd=2,add=T, resolution=0)#
dev.off()
map('Texas', fill = "#1F497D", col='black', lwd=2,add=T, resolution=0)
?map
map('state', region = c('Texas'), fill = "#1F497D", col='black', lwd=2,add=T, resolution=0)
map('state', region = c('Texas'), fill = TRUE, col= "#1F497D", add=T, resolution=0)
map('state', region = c('Texas'), fill = TRUE, col= "#1F497D", resolution=0)
map('state', region = c('Texas'), fill = FALSE, col='black', lwd=2, add=T, resolution=0)
tiff(filename="conceptual_Texas.tiff", height=65, width=120, units="mm", res=600, compression="lzw")#
map('state', region = c('Texas'), fill = TRUE, col= "#1F497D", resolution=0)#
map('state', region = c('Texas'), fill = FALSE, col='black', lwd=2, add=T, resolution=0)#
dev.off()
tiff(filename="conceptual_California.tiff", height=65, width=120, units="mm", res=600, compression="lzw")#
map('state', region = c('California'), fill = TRUE, col= "#1F497D", resolution=0)#
map('state', region = c('California'), fill = FALSE, col='black', lwd=2, add=T, resolution=0)#
dev.off()
map('usa', fill = TRUE, col= "#763636", resolution=0)#
map('usa', fill = FALSE, col='black', lwd=2, add=T, resolution=0)
# California#
tiff(filename="conceptual_allUS.tiff", height=65, width=120, units="mm", res=600, compression="lzw")#
map('usa', fill = TRUE, col= "#8D1D10", resolution=0)#
map('usa', fill = FALSE, col='black', lwd=2, add=T, resolution=0)#
dev.off()
############################################################
############################################################
############################################################
# Figures for Lion Co-infection manuscript#
# Erin E. Gorsich#
# 12 - May - 2017#
############################################################
############################################################
############################################################
#
############################################################
# read in HB's data, packages and scripts#
############################################################
rm(list = ls())#
setwd("~/GitHub/lion-co-infection-networks")#
alldata<-read.csv("~/Documents/postdoc_buffology/HB-lion_coinfection_network/COINCLIQ.csv")#
drop <- c('THEILERIABABESIA', 'OTHER', 'BABESA') # take out some#
alldata <- alldata[, c(!names(alldata) %in% drop)]#
dataneg<-alldata[alldata$FIV=="Negative",]#
datapos<-alldata[alldata$FIV=="Positive",]#
plotdata<-alldata[,c(11:length(colnames(alldata)))]#
#
library(lattice)  #
library(bipartite)#
library(igraph)  # tried bigraph but not avaliable#
library(gplots)#
library(HiveR)#
library(grid)#
library('circlize')#
library('RColorBrewer')#
library('dplyr')#
#
# functions that groom raw data into network matricies#
source("prep_data_to_matrix.R")#
# functions that calculate network statistics   #
source("calculate_net_and_node_stats.R")#
# functions to make hive plots  #
source("make_bipart_hive_plot.R")   #
source("mod.edge2HPD.R")#
######################
############################################################
############################################################
# Prep analyses for figures#
############################################################
############################################################
#
# make networks#
# all animals, FIV+ animals, FIV- animals#
###################################################
# turn data into matricies for monopartite and bipartite nets#
all2<-make_all_matrix(alldata)  #
all3<-make_all_lionmatrix(alldata) #
allb<-make_all_bipartite_matrix(alldata)#
FIVneg2<-make_matrix(dataneg); colnames(FIVneg2) <- colnames(plotdata[-1])#
FIVneg3<-make_lionmatrix(dataneg); rownames(FIVneg3) <- colnames(plotdata[-1])#
FIVpos2<-make_matrix(datapos); colnames(FIVpos2) <- colnames(plotdata[-1])#
FIVpos3<-make_lionmatrix(datapos); rownames(FIVpos3) <- colnames(plotdata[-1])#
#
# parnet: nodes=parasites; edges= # of shared hosts, symmetric#
all_parnet<- tcrossprod(t(all2))
head(all2)
head(all_parnet)
# all parasites: #
set.seed(1)#
ga<-graph.adjacency(all_parnet, mode="upper", weighted=TRUE) # undirected/named/weighted/self#
ga_all<- simplify(ga, remove.multiple=FALSE, remove.loops=TRUE)#
V(ga_all)$color <- as.character(newdf$col[match( V(ga_all)$name, newdf$parasite)])
############################################################
# specify color choices by type#
gut = c("ASCARIDS", "TAPES", "HOOKS", "COCCIDIA", "TOXO", "WHIPS")#
bloodborne = c("ERLICHIAANAPLASMA", "BFELIS", "BLEO", #
	"BMICROTI", "BLENGUA", "TBICORNIS", "HEPATOZOON", #
	"TANNAE", "BCANIS", "BROSSI", "BVOGELI")#
virus = c("FIV", "CDV", "FPV", "CALICI", "CORONA")#
#
newdf<-data.frame(parasite=c(virus, gut, bloodborne), #
    type=c(rep("virus", length(virus)), rep("gut", length(gut)), #
    		rep("bloodborne", length(bloodborne)) ), #
    prev=NA, #
    col= c("#000033", rep("#663399", length(virus)-1), #
    		rep("#006666", length(gut)), #
		rep("#FF6600", length(bloodborne))) )#
#
newdf<-data.frame(parasite=c(virus, gut, bloodborne), #
    type=c(rep("virus", length(virus)), rep("gut", length(gut)), #
    		rep("bloodborne", length(bloodborne)) ), #
    prev=NA, #
    col= c("red4", rep("#663399", length(virus)-1), #
    		rep("#66CCCC", length(gut)), #
		rep("#FF9933", length(bloodborne))) )
set.seed(1)#
ga<-graph.adjacency(all_parnet, mode="upper", weighted=TRUE) # undirected/named/weighted/self#
ga_all<- simplify(ga, remove.multiple=FALSE, remove.loops=TRUE)#
V(ga_all)$color <- as.character(newdf$col[match( V(ga_all)$name, newdf$parasite)])
plot(ga_all, main = "All parasites", vertex.label = NA)
g <- erdos.renyi.game(1000, 1/1000)#
plot(g)
V(g)$color <- rep("#8D1D10", length(V(g)))
plot(g, vertex.label = NA, size = 5)
V(g)$size <- rep(5, length(V(g)))
plot(g, vertex.label = NA)
E(g)$color <- "darkgray"
plot(g, vertex.label = NA)
g <- erdos.renyi.game(1000, 1/1000)#
V(g)$color <- rep("#8D1D10", length(V(g)))#
V(g)$size <- rep(1, length(V(g)))#
E(g)$color <- "darkgray"#
plot(g, vertex.label = NA)
g <- sample_gnp(100, 1/100)
g <- barabasi.game(100)
plot(g, layout=layout_with_fr, vertex.size=4,#
     vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5)

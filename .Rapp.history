library(igraph)
?graph.strength
?diameter
?require
?bipartite
??bipartite
make_edgelist= function(data){#
  temp<- NA#
  start<-data[1,]#
  edgelist<-data.frame(parasite=colnames(temp[which(start=="Positive")]), #
                       lion=rep(data$LION[1], length(colnames(temp[which(start=="Positive")]))))#
  rm(start)#
  for (i in 2:length(data[,1])){#
    temp<-data[i,]#
    df<-data.frame(parasite=colnames(temp[which(temp=="Positive")]), #
                   lion=rep(data$LION[i], length(colnames(temp[which(temp=="Positive")]))))#
    edgelist<-rbind(edgelist, df)#
    rm(df, temp)#
  }#
  return(edgelist)#
}
make_all_bipartite_matrix= function(data){#
  tmat<-matrix(0, ncol=length(c(as.character(data$LION), colnames(plotdata)) ), #
               nrow=length(c(as.character(data$LION), colnames(plotdata))) , dimnames=list(#
                 c(as.character(data$LION), colnames(plotdata)), #
                 c(as.character(data$LION), colnames(plotdata)) ) )#
  # lion to lion transitions are 0#
  # parastie to parasite connections are 0#
  # fill in rows & columns= from lion (1:111) to parasite (112:136)#
  for (i in 1:length(data[,1])){   # for each lion... #
      for (j in 1:length(plotdata[1,])){  # for each parasite#
            if(data[i, 10+j]=="Positive") {#
               tmat[i, 111+j] <- 1#
               tmat[111+j, i] <-1}  # symmetric#
            else {#
              tmat[i, 111+j] <- 0#
              tmat[111+j, i] <- 0#
            }  #
        }                          #
  }#
 return(tmat)#
}

negwt
head(bipos)
head(bineg)
bineg$degree * bineg$normconstant
bipos$degree * bipos$normconstant
?degree.centrality
??degree.centrality
??degree.centrality
?BiGraph
?BiGraph
?bipartite
?igraph
?degree
allb<-make_all_bipartite_matrix(alldata)
temp<-NA
dataneg <- dataneg[, !names(dataneg) %in% drop]
FIVneg<- make_edgelist(dataneg)
FIVneg2<-make_matrix(dataneg); FIVneg3<-make_lionmatrix(dataneg)
colnames(FIVneg2) <- colnames(plotdata[-1])
FIVneg_parnet<- tcrossprod(t(FIVneg2))  # nodes=parasites; edges=number of shared hosts, sym
FIVneg_lionnet<-tcrossprod(t(FIVneg3))  # nodes=lions; edges=number of shared parasites, sym
FIVneg_binet<- make_bipartite_matrix(dataneg) # nodes = lions and parasites
datapos <- datapos[, !names(datapos) %in% drop]
FIVpos<-make_edgelist(datapos)
FIVpos2<-make_matrix(datapos); FIVpos3<-make_lionmatrix(datapos)
colnames(FIVpos2) <- colnames(plotdata[-1])
FIVpos_parnet<- tcrossprod(t(FIVpos2))  # nodes=parasites; edges=number of shared hosts, sym
FIVpos_lionnet<-tcrossprod(t(FIVpos3))  # nodes=lions; edges=number of shared parasites, sym
FIVpos_binet<- make_bipartite_matrix(datapos)
source("make_bipart_hive_plot.R")
make_bipart_hive_plot(FIVneg_binet, datatype="subset", demogdata=alldata,
save_nodedf=TRUE, name="binet_FIVneg")
## FUNCTION TO MAKE HIVE PLOTS for HB's data
make_bipart_hive_plot<-function(matdata, datatype, demogdata=alldata, save_nodedf, name) {
########################
########################
## INPUT: matdata: data matricies for bipartite network
## datatype= "all" or "subset" when add classes of FIV will have to think more
## demogdata= dataframe containing Lion ID, age, sex, pride status, bcs (alldata)
## save_nodedf= TRUE/FALSE, should the nodedata frame be saved.
## name= what to call output image
## OUTPUT: hiveplot image- use R studio for now
## need to set up saving and high res photo output sections
## colmatch not in function, need saved
## NOTE: newdf and alldata read from global environment
########################
########################
# make is so bloodbornes go on one side of the plot, rest on other!
bloodborne = c("ERLICHIAANAPLASMA",
"BFELIS", "BLEO", "BMICROTI", "BLENGUA", "TBICORNIS",
"HEPATOZOON", "TANNAE", "BCANIS", "BROSSI", "BVOGELI")
nonbloodborne<-c("ASCARIDS", "TAPES", "HOOKS", "COCCIDIA", "TOXO", "WHIPS",
"FIV", "CDV", "FPV", "CALICI", "CORONA")
numlions <- length(colnames(matdata)[!(colnames(matdata) %in% c(bloodborne, nonbloodborne))])
numtotal <- length(colnames(matdata))
parasite_names <- colnames(matdata)[c(numlions+1):numtotal]
lion_names <- colnames(matdata)[1:numlions]
uppermat<-matdata[1:numlions,]
lowermat<-matdata[c(numlions + 1):numtotal,]
for (i in 1:length(colnames(uppermat))){
if (colnames(uppermat)[i] %in% bloodborne){
uppermat[,i]<-0
}
}
for (j in 1:length(rownames(lowermat))){
if (rownames(lowermat)[j] %in% nonbloodborne){
lowermat[j,]<-0
}
}
matdata<-rbind(uppermat, lowermat)
# turn adjacency matrix into an i-graph object
ga<-graph.adjacency(matdata)
is.simple(ga)  # should be a simple dataframe, symmetric
V(ga)$type<-c(rep(TRUE, length(lion_names)),
rep(FALSE, length(parasite_names)))
is.bipartite(ga)
nodedf<- data.frame(name=V(ga)$name, degree=NA, degree_nonorm= NA, closeness= NA, betweenness = NA, radius=NA, color=NA, axis= NA,
symbol=19, malefemale=NA, agecat=NA, 	size=NA, normconstant = NA)
# specify node information (circle size= total degree *1.5; axis by age category)
nodedf$agecat<-as.character(alldata$LIFESTAGE[match(nodedf$name, alldata$LION)])
nodedf$agecat[is.na(nodedf$agecat)]<- "parasite"
nodedf$malefemale<-as.character(alldata$SEX[match(nodedf$name, alldata$LION)])
nodedf$malefemale[is.na(nodedf$agecat)]<- "parasite"
nodedf$color<- as.character(newdf$col[match(nodedf$name, newdf$parasite)])
nodedf$color[is.na(nodedf$color)]<- "thistle4" # label lions
nodedf$axis<-1
nodedf$axis[V(ga)$type==FALSE]<-2
nodedf$degree_nonorm<-degree(ga)
nodedf$degree<-bipartite.degree.centrality(ga)$Bipartite.Degree.Centrality
nodedf$betweenness<-bipartite.betweenness.centrality(ga)$Bipartite.Betweenness.Centrality
nodedf$closeness<-bipartite.closeness.centrality(ga)$Bipartite.Closeness.Centrality
nodedf$normconstant <- (length(V(ga))-1)  # centrality measures = degree/normconstant.
#nodedf$symbol[nodedf$sex=="female"]<-19
#nodedf$symbol[nodedf$agecat=="male"]<-17
nodedf<-nodedf[order(nodedf$axis, nodedf$degree),]
nodedf$size[1:length(nodedf$axis[nodedf$axis==1])] <- nodedf$degree[1:length(
nodedf$axis[nodedf$axis==1])]*1.2
nodedf$size[length(nodedf$axis[nodedf$axis==1]):length(nodedf$axis)] <- nodedf$degree[
length(nodedf$axis[nodedf$axis==1]):length(nodedf$axis)]*1.2
if (datatype == "all"){
# specify location of node on axis 1 as the sum of the total size.
nodedf$radius<-NA
nodedf$radius[1]<-nodedf$size[1]
for (i in 2:length(nodedf$axis[nodedf$axis==1])){
nodedf$radius[i]<-nodedf$size[i] + nodedf$radius[i-1] + 0.2
}
# specify location of node on axis 2 as the sum of the total size.
nodedf$radius[length(nodedf$axis[nodedf$axis==1]) + 1] <- nodedf$size[length(
nodedf$axis[nodedf$axis==1])+1]+.5
for (i in (length(nodedf$axis[nodedf$axis==1])+2):((length(nodedf$axis[nodedf$axis==1]))+
length(nodedf$axis[nodedf$axis==2])) ){
nodedf$radius[i]<-nodedf$size[i]+ nodedf$radius[i-1]+0.2
}
}
if (datatype == "subset"){
nodedf$radius<-NA
nodedf$radius[1]<-nodedf$size[1]
for (i in 2:length(nodedf$axis[nodedf$axis==1])){
nodedf$radius[i]<-nodedf$size[i] + nodedf$radius[i-1]
}
# specify location of node on axis 2 as the sum of the total size.
nodedf$radius[length(nodedf$axis[nodedf$axis==1]) + 1] <- nodedf$size[length(
nodedf$axis[nodedf$axis==1])+1]
for (i in (length(nodedf$axis[nodedf$axis==1])+2):((length(nodedf$axis[nodedf$axis==1]))+
length(nodedf$axis[nodedf$axis==2])) ){
nodedf$radius[i]<-nodedf$size[i]+ nodedf$radius[i-1]
}
}
if (save_nodedf){
write.csv(nodedf, paste("nodedf", name, ".csv", sep=""))
}
# make an edge-list with weight attributes
edgelist<-get.edgelist(ga)
edf<-data.frame(onode=as.character(edgelist[,1]), dnode=as.character(edgelist[,2]))
edf$wt<-0.6
edf$col<-NA
edf$col<-nodedf$color[match(edf$dnode, nodedf$name)]
for (i in 1:length(edf[,1]))
if (edf$dnode[i] %in% alldata$LION){
edf$col[i]<-"lightblue3"
}
nodedf$axis<-as.integer(nodedf$axis)
hive1<-mod.edge2HPD(edge_df= edf[,1:2], edge.weight=edf$wt, edge.color=edf$col,
node.color= nodedf[,c("name", "color")], 	node.size=nodedf[, c("name", "size")],
node.radius= nodedf[,c("name", "radius")], node.axis=nodedf[,c("name", "axis")] )
par(mar=c(0,0,0,0))
plotHive(hive1, bkgnd = "white", axLabs=c("L", "P"),
axLab.pos = 5, axLab.gpar = gpar(col = "black"))
rm(ga, nodedf)
}
make_bipart_hive_plot(FIVneg_binet, datatype="subset", demogdata=alldata,
save_nodedf=TRUE, name="binet_FIVneg")
make_bipart_hive_plot(FIVpos_binet, datatype="all", demogdata=alldata,
save_nodedf=TRUE, name="binet_FIVpos")
nodedf<- data.frame(name=V(ga)$name, degree=NA, degree_nonorm= NA, closeness= NA, betweenness = NA, radius=NA, color=NA, axis= NA,
symbol=19, malefemale=NA, agecat=NA, 	size=NA, normconstant = NA)
head(nodedf)
## FUNCTION TO MAKE HIVE PLOTS for HB's data
make_bipart_hive_plot<-function(matdata, datatype, demogdata=alldata, save_nodedf, name) {
########################
########################
## INPUT: matdata: data matricies for bipartite network
## datatype= "all" or "subset" when add classes of FIV will have to think more
## demogdata= dataframe containing Lion ID, age, sex, pride status, bcs (alldata)
## save_nodedf= TRUE/FALSE, should the nodedata frame be saved.
## name= what to call output image
## OUTPUT: hiveplot image- use R studio for now
## need to set up saving and high res photo output sections
## colmatch not in function, need saved
## NOTE: newdf and alldata read from global environment
########################
########################
# make is so bloodbornes go on one side of the plot, rest on other!
bloodborne = c("ERLICHIAANAPLASMA",
"BFELIS", "BLEO", "BMICROTI", "BLENGUA", "TBICORNIS",
"HEPATOZOON", "TANNAE", "BCANIS", "BROSSI", "BVOGELI")
nonbloodborne<-c("ASCARIDS", "TAPES", "HOOKS", "COCCIDIA", "TOXO", "WHIPS",
"FIV", "CDV", "FPV", "CALICI", "CORONA")
numlions <- length(colnames(matdata)[!(colnames(matdata) %in% c(bloodborne, nonbloodborne))])
numtotal <- length(colnames(matdata))
parasite_names <- colnames(matdata)[c(numlions+1):numtotal]
lion_names <- colnames(matdata)[1:numlions]
uppermat<-matdata[1:numlions,]
lowermat<-matdata[c(numlions + 1):numtotal,]
for (i in 1:length(colnames(uppermat))){
if (colnames(uppermat)[i] %in% bloodborne){
uppermat[,i]<-0
}
}
for (j in 1:length(rownames(lowermat))){
if (rownames(lowermat)[j] %in% nonbloodborne){
lowermat[j,]<-0
}
}
matdata<-rbind(uppermat, lowermat)
# turn adjacency matrix into an i-graph object
ga<-graph.adjacency(matdata)
is.simple(ga)  # should be a simple dataframe, symmetric
V(ga)$type<-c(rep(TRUE, length(lion_names)),
rep(FALSE, length(parasite_names)))
is.bipartite(ga)
nodedf<- data.frame(name=V(ga)$name, degree=NA, degree_nonorm= NA, closeness= NA, betweenness = NA, radius=NA, color=NA, axis= NA,
symbol=19, malefemale=NA, agecat=NA, 	size=NA, normconstant = NA)
# specify node information (circle size= total degree *1.5; axis by age category)
nodedf$agecat<-as.character(alldata$LIFESTAGE[match(nodedf$name, alldata$LION)])
nodedf$agecat[is.na(nodedf$agecat)]<- "parasite"
nodedf$malefemale<-as.character(alldata$SEX[match(nodedf$name, alldata$LION)])
nodedf$malefemale[is.na(nodedf$agecat)]<- "parasite"
nodedf$color<- as.character(newdf$col[match(nodedf$name, newdf$parasite)])
nodedf$color[is.na(nodedf$color)]<- "thistle4" # label lions
nodedf$axis<-1
nodedf$axis[V(ga)$type==FALSE]<-2
nodedf$degree_nonorm<-degree(ga)
nodedf$degree<-bipartite.degree.centrality(ga)$Bipartite.Degree.Centrality
nodedf$betweenness<-bipartite.betweenness.centrality(ga)$Bipartite.Betweenness.Centrality
nodedf$closeness<-bipartite.closeness.centrality(ga)$Bipartite.Closeness.Centrality
nodedf$normconstant <- (length(V(ga))-1)  # centrality measures = degree/normconstant.
#nodedf$symbol[nodedf$sex=="female"]<-19
#nodedf$symbol[nodedf$agecat=="male"]<-17
nodedf<-nodedf[order(nodedf$axis, nodedf$degree),]
nodedf$size[1:length(nodedf$axis[nodedf$axis==1])] <- nodedf$degree[1:length(
nodedf$axis[nodedf$axis==1])]*1.2
nodedf$size[length(nodedf$axis[nodedf$axis==1]):length(nodedf$axis)] <- nodedf$degree[
length(nodedf$axis[nodedf$axis==1]):length(nodedf$axis)]*1.2
if (datatype == "all"){
# specify location of node on axis 1 as the sum of the total size.
nodedf$radius<-NA
nodedf$radius[1]<-nodedf$size[1]
for (i in 2:length(nodedf$axis[nodedf$axis==1])){
nodedf$radius[i]<-nodedf$size[i] + nodedf$radius[i-1] + 0.2
}
# specify location of node on axis 2 as the sum of the total size.
nodedf$radius[length(nodedf$axis[nodedf$axis==1]) + 1] <- nodedf$size[length(
nodedf$axis[nodedf$axis==1])+1]+.5
for (i in (length(nodedf$axis[nodedf$axis==1])+2):((length(nodedf$axis[nodedf$axis==1]))+
length(nodedf$axis[nodedf$axis==2])) ){
nodedf$radius[i]<-nodedf$size[i]+ nodedf$radius[i-1]+0.2
}
}
if (datatype == "subset"){
nodedf$radius<-NA
nodedf$radius[1]<-nodedf$size[1]
for (i in 2:length(nodedf$axis[nodedf$axis==1])){
nodedf$radius[i]<-nodedf$size[i] + nodedf$radius[i-1]
}
# specify location of node on axis 2 as the sum of the total size.
nodedf$radius[length(nodedf$axis[nodedf$axis==1]) + 1] <- nodedf$size[length(
nodedf$axis[nodedf$axis==1])+1]
for (i in (length(nodedf$axis[nodedf$axis==1])+2):((length(nodedf$axis[nodedf$axis==1]))+
length(nodedf$axis[nodedf$axis==2])) ){
nodedf$radius[i]<-nodedf$size[i]+ nodedf$radius[i-1]
}
}
if (save_nodedf){
write.csv(nodedf, paste("nodedf", name, ".csv", sep=""))
}
# make an edge-list with weight attributes
edgelist<-get.edgelist(ga)
edf<-data.frame(onode=as.character(edgelist[,1]), dnode=as.character(edgelist[,2]))
edf$wt<-0.6
edf$col<-NA
edf$col<-nodedf$color[match(edf$dnode, nodedf$name)]
for (i in 1:length(edf[,1]))
if (edf$dnode[i] %in% alldata$LION){
edf$col[i]<-"lightblue3"
}
nodedf$axis<-as.integer(nodedf$axis)
hive1<-mod.edge2HPD(edge_df= edf[,1:2], edge.weight=edf$wt, edge.color=edf$col,
node.color= nodedf[,c("name", "color")], 	node.size=nodedf[, c("name", "size")],
node.radius= nodedf[,c("name", "radius")], node.axis=nodedf[,c("name", "axis")] )
par(mar=c(0,0,0,0))
plotHive(hive1, bkgnd = "white", axLabs=c("L", "P"),
axLab.pos = 5, axLab.gpar = gpar(col = "black"))
rm(ga, nodedf)
}
make_bipart_hive_plot(FIVpos_binet, datatype="all", demogdata=alldata,
save_nodedf=TRUE, name="binet_FIVpos")
getwd()
make_bipart_hive_plot(FIVpos_binet, datatype="all", demogdata=alldata,
save_nodedf=TRUE, name="binet_FIVpos")
make_bipart_hive_plot(FIVneg_binet, datatype="subset", demogdata=alldata,
save_nodedf=TRUE, name="binet_FIVneg")
biall<- read.csv("~/Documents/postdoc_buffology/HB-lion_coinfection_network/lion_coinfection_networks_files/nodedfbipartite_all.csv")
bineg<- read.csv("~/Documents/postdoc_buffology/HB-lion_coinfection_network/lion_coinfection_networks_files/nodedfbinet_FIVneg.csv")
binegl<- bineg[bineg$axis==1,]
bipos<- read.csv("~/Documents/postdoc_buffology/HB-lion_coinfection_network/lion_coinfection_networks_files/nodedfbinet_FIVpos.csv")
biposl<- bipos[bipos$axis==1,]
breaks <- seq(0, 10, 1)
head(binegl)
hist(biposl$degree_nonorm)
hist(binegl$degree_nonorm)
dev.off()
hist(binegl$degree_nonorm)
hist(biposl$degree_nonorm)
breaks <- seq(0, 10, 1)
# Note: Value divided by maximum value in the network...
negwt <- hist(biposl$degree_no , breaks = breaks , plot = FALSE)
poswt <- hist(binegl$degree , breaks = breaks , plot = FALSE)
plot(negwt$mids, negwt$counts, xlim = c(0, 10), ylim= c(0, 16),
xlab = "Bipartite Degree (Parasite richness)", ylab= "Frequency", las= 1,
type = "b", pch= 19, lty = 1, lwd = 1, tck = -0.025, bty = "n")
lines(poswt$mids, poswt$counts, lwd = 1, lty = 3)
points(poswt$mids, poswt$counts, pch= 21, lty = 3)
negwt
poswt
negwt <- hist(biposl$degree_nonorm , breaks = breaks , plot = FALSE)
poswt <- hist(binegl$degree_nonorm , breaks = breaks , plot = FALSE)
plot(negwt$mids, negwt$counts, xlim = c(0, 10), ylim= c(0, 17),
xlab = "Bipartite Degree (Parasite richness)", ylab= "Frequency", las= 1,
type = "b", pch= 19, lty = 1, lwd = 1, tck = -0.025, bty = "n")
lines(poswt$mids, poswt$counts, lwd = 1, lty = 3)
points(poswt$mids, poswt$counts, pch= 21, lty = 3)
legend("topright", c("FIV -", "FIV +"), lty=c(1, 3), pch=c(19, 21), lwd=1, bty="n")
plot(negwt$mids, negwt$counts, xlim = c(0, 10), ylim= c(0, 20),
xlab = "Bipartite Degree (Parasite richness)", ylab= "Frequency", las= 1,
type = "b", pch= 19, lty = 1, lwd = 1, tck = -0.025, bty = "n")
lines(poswt$mids, poswt$counts, lwd = 1, lty = 3)
points(poswt$mids, poswt$counts, pch= 21, lty = 3)
legend("topright", c("FIV -", "FIV +"), lty=c(1, 3), pch=c(19, 21), lwd=1, bty="n")
plot(negwt$mids, negwt$counts, xlim = c(0, 10), ylim= c(0, 17),
xlab = "Bipartite Degree (Parasite richness)", ylab= "Frequency", las= 1,
type = "b", pch= 19, lty = 1, lwd = 1, tck = -0.025, bty = "n")
lines(poswt$mids, poswt$counts, lwd = 1, lty = 3)
points(poswt$mids, poswt$counts, pch= 21, lty = 3)
legend("topright", c("FIV -", "FIV +"), lty=c(1, 3), pch=c(19, 21), lwd=1, bty="n")
var(biposl$degree_nonorm)
var(binegl$degree_nonorm)
mean(binegl$degree_nonorm)
mean(biposl$degree_nonorm)
poswt <- hist(biposl$degree_nonorm , breaks = breaks , plot = FALSE)
negwt <- hist(binegl$degree_nonorm , breaks = breaks , plot = FALSE)
# weighted
plot(negwt$mids, negwt$counts, xlim = c(0, 10), ylim= c(0, 17),
xlab = "Bipartite Degree (Parasite richness)", ylab= "Number of lions", las= 1,
type = "b", pch= 19, lty = 1, lwd = 1, tck = -0.025, bty = "n")
lines(poswt$mids, poswt$counts, lwd = 1, lty = 3)
points(poswt$mids, poswt$counts, pch= 21, lty = 3)
legend("topright", c("FIV -", "FIV +"), lty=c(1, 3), pch=c(19, 21), lwd=1, bty="n")
head(bineg)
summary(bineg)
apply(binegl$degree, list(binegl$malefemale, binegl$agecat), mean)
lapply(binegl$degree, list(binegl$malefemale, binegl$agecat), mean)
tapply(binegl$degree, list(binegl$malefemale, binegl$agecat), mean)
tapply(binegp$degree, list(binegp$malefemale, binegp$agecat), mean)
tapply(biposl$degree, list(biposl$malefemale, biposl$agecat), mean)
tapply(biposl$degree, list(biposl$malefemale, biposl$agecat), sd)
tapply(binegl$degree, list(binegl$malefemale, binegl$agecat), sd)
plot(as.data.frame(tapply(binegl$degree, list(binegl$malefemale, binegl$agecat), mean))
)
temp<-as.data.frame(tapply(binegl$degree, list(binegl$malefemale, binegl$agecat), mean)
)
temp
n<- temp[,-'parasite']
n<- temp[,-2]
n
is.na(n)<-0
is.na(n$Male)<-0
is.na(n)
n[is.na(n)]<-0
n
library(MASS)
barplot2(n, beside=TRUE)
as.matrix(n)
barplot2(as.matrix(n), beside=TRUE)
tapply(biposl$degree, list(biposl$malefemale, biposl$agecat), mean)
barplot2(as.matrix(n), beside=TRUE, col=c("lightgray", "darkgray"), ylab= "Weighted Degree", main= "FIV- lions")
barplot2(as.matrix(n), beside=TRUE, col=c("darkslategray2", "darkslategray"), ylab= "Weighted Degree", main= "FIV- lions")
legend("topright", legend= c("Female", "Male"), fill=c("darkslategray2", "darkslategray"))
barplot2(as.matrix(n), beside=TRUE, col=c("darkslategray2", "darkslategray"), ylab= "Weighted Degree", main= "FIV- lions")
legend("topright", legend= c("Female", "Male"), fill=c("darkslategray2", "darkslategray"), cex=0.5, btn="n")
legend("topright", legend= c("Female", "Male"), fill=c("darkslategray2", "darkslategray"), cex=0.5, bty="n")
temp<- as.data.frame(tapply(biposl$degree, list(biposl$malefemale, biposl$agecat), mean))
p<- temp[,-2]
p<- temp[,-2]
p[is.na(p)]<-0
barplot2(as.matrix(p), beside=TRUE, col=c("darkslategray2", "darkslategray"), ylab= "Weighted Degree", main= "FIV+ lions")
p
temp<- as.data.frame(tapply(biposl$degree, list(biposl$malefemale, biposl$agecat), mean))
temp
p<- temp[,-4]
barplot2(as.matrix(p), beside=TRUE, col=c("darkslategray2", "darkslategray"), ylab= "Weighted Degree", main= "FIV+ lions")
barplot2(as.matrix(p), beside=TRUE, col=c("darkslategray2", "darkslategray"), ylab= "Weighted Degree", main= "FIV+ lions", cex.lab=0.7)
barplot2(as.matrix(p), beside=TRUE, col=c("darkslategray2", "darkslategray"), ylab= "Weighted Degree", main= "FIV+ lions", cex.lab=0.4)
barplot2(as.matrix(p), beside=TRUE, col=c("darkslategray2", "darkslategray"), ylab= "Weighted Degree", main= "FIV+ lions", las=1)
?barplot2
```{r, age_sex_patterns, echo=FALSE}
temp<-as.data.frame(tapply(binegl$degree, list(binegl$malefemale, binegl$agecat), mean))
n<- temp[,-2]
n[is.na(n)]<-0
barplot2(as.matrix(n), beside=TRUE, col=c("darkslategray2", "darkslategray"), ylab= "Weighted Degree", main= "FIV- lions")
legend("topright", legend= c("Female", "Male"), fill=c("darkslategray2", "darkslategray"), cex=0.7, bty="n")
temp<- as.data.frame(tapply(biposl$degree, list(biposl$malefemale, biposl$agecat), mean))
p<- temp[,-4]
barplot2(as.matrix(p), beside=TRUE, col=c("darkslategray2", "darkslategray"), ylab= "Weighted Degree", main= "FIV+ lions", las=1, names.arg =c("Cub", "Geriatric", "Juv", "Prime", "SubAd"))
summary(biposl)
temp<-as.data.frame(tapply(betweenness, list(binegl$malefemale, binegl$agecat), mean))
n<- temp[,-2]
n[is.na(n)]<-0
barplot2(as.matrix(n), beside=TRUE, col=c("darkslategray2", "darkslategray"), ylab= "Betweenness Centrality", main= "FIV- lions")
legend("topright", legend= c("Female", "Male"), fill=c("darkslategray2", "darkslategray"), cex=0.7, bty="n")
temp<-as.data.frame(tapply(betweenness, list(binegl$malefemale, binegl$agecat), mean))
temp<-as.data.frame(tapply(binegl$betweenness, list(binegl$malefemale, binegl$agecat), mean))
n<- temp[,-2]
n[is.na(n)]<-0
barplot2(as.matrix(n), beside=TRUE, col=c("darkslategray2", "darkslategray"), ylab= "Betweenness Centrality", main= "FIV- lions")
legend("topright", legend= c("Female", "Male"), fill=c("darkslategray2", "darkslategray"), cex=0.7, bty="n")
temp<- as.data.frame(tapply(biposl$betweenness, list(biposl$malefemale, biposl$agecat), mean))
p<- temp[,-4]
barplot2(as.matrix(p), beside=TRUE, col=c("darkslategray2", "darkslategray"), ylab= "Betweenness Centrality", main= "FIV+ lions", las=1, names.arg =c("Cub", "Geriatric", "Juv", "Prime", "SubAd"))
summary(biposl)
setwd("~/GitHub/lion-co-infection-networks")
alldata<-read.csv("~/Documents/postdoc_buffology/HB-lion_coinfection_network/COINCLIQ.csv")
dataneg<-alldata[alldata$FIV=="Negative",]
datapos<-alldata[alldata$FIV=="Positive",]
plotdata<-alldata[,c(11:35)]
library(lattice)
library(bipartite)
library(igraph)  # tried bigraph but not avaliable
library(gplots)
library(HiveR)
library(grid)
#####################
# Functions: There are three script files required to run this script
source("prep_data_to_matrix.R")   # functions that groom raw data into network matricies
source("calculate_net_and_node_stats.R")  # functions that calculate network statistics
source("make_bipart_hive_plot.R")
source("mod.edge2HPD.R")
get_prev<-function(dat) {length(dat[dat=="Positive"])/length(dat)}
temp<-apply(alldata[,c(11:35)], 2, get_prev)
gut = c("ASCARIDS", "TAPES", "HOOKS", "COCCIDIA", "TOXO", "WHIPS")
bloodborne = c("ERLICHIAANAPLASMA", #"THEILERIABABESIA", "BABESA",
"BFELIS", "BLEO", "BMICROTI", "BLENGUA", "TBICORNIS",
"HEPATOZOON", "TANNAE", "BCANIS", "BROSSI", "BVOGELI")
virus = c("FIV", "CDV", "FPV", "CALICI", "CORONA")
newdf<-data.frame(parasite=c(virus, gut, bloodborne),
type=c(rep("virus", length(virus)), rep("gut", length(gut)),
rep("bloodborne", length(bloodborne)) ),
prev=NA, col= c(rep("darkseagreen", length(virus)),
rep("darksalmon", length(gut)),
rep("lightblue3", length(bloodborne))) )
for (i in 1:length(newdf$parasite)){
temp<- alldata[,colnames(alldata) == as.character(newdf$parasite[i])]
newdf$prev[i]<- length(temp[temp=="Positive"])/length(temp)
rm(temp)
}
newdf$parasite<-as.character(newdf$parasite)
newdf$name<-newdf$parasite
newdf$name[newdf$name == 'ERLICHIAANAPLASMA']<-"ERLANAP"
newdf$name[newdf$name == 'HEPATOZOON']<-"HEPATO"
virus<-newdf[newdf$type=="virus",]
gut<-newdf[newdf$type=="gut",]
blood<-newdf[newdf$type=="bloodborne",]
par(mar=c(4,5,4,2)+0.1)
barplot2(height=c(virus$prev[order(virus$prev, decreasing=FALSE)],
gut$prev[order(gut$prev, decreasing=FALSE)],
blood$prev[order(blood$prev, decreasing=FALSE)]),
names.arg=c(as.character(virus$name[order(virus$prev, decreasing=FALSE)]),
as.character(gut$name[order(gut$prev, decreasing=FALSE)]),
as.character(blood$name[order(blood$prev, decreasing=FALSE)])),
col=c(as.character(virus$col[order(virus$prev, decreasing=FALSE)]),
as.character(gut$col[order(gut$prev, decreasing=FALSE)]),
as.character(blood$col[order(blood$prev, decreasing=FALSE)])),
horiz=TRUE, las=1, cex.names = 0.8)
newdf2<-newdf[-c(newdf$name=="FIV"),]
newdf2$prevneg<-NA;  newdf2$prevpos<-NA
for (i in 1:length(newdf2$parasite)){
newdf2$prevneg[i]<-get_prev(dataneg[,colnames(dataneg) == newdf2$parasite[i]])
newdf2$prevpos[i]<-get_prev(datapos[,colnames(datapos) == newdf2$parasite[i]])
}
virus2<-newdf2[newdf2$type=="virus",]
gut2<-newdf2[newdf2$type=="gut",]
blood2<-newdf2[newdf2$type=="bloodborne",]
par(mfrow=c(1,2), mar=c(4,5,4,2)+0.1)
barplot2(height=c(virus2$prevneg[order(virus2$prev, decreasing=FALSE)],
gut2$prevneg[order(gut2$prev, decreasing=FALSE)],
blood2$prevneg[order(blood2$prev, decreasing=FALSE)]),
names.arg=c(as.character(virus2$name[order(virus2$prev, decreasing=FALSE)]),
as.character(gut2$name[order(gut2$prev, decreasing=FALSE)]),
as.character(blood2$name[order(blood2$prev, decreasing=FALSE)])),
col=c(as.character(virus2$col[order(virus2$prev, decreasing=FALSE)]),
as.character(gut2$col[order(gut2$prev, decreasing=FALSE)]),
as.character(blood2$col[order(blood2$prev, decreasing=FALSE)])),
horiz=TRUE, las=1, main="FIV negative ", xlab="Prevalence", cex.names= 0.8)
barplot2(height=c(virus2$prevpos[order(virus2$prevpos, decreasing=FALSE)],
gut2$prevpos[order(gut2$prevpos, decreasing=FALSE)],
blood2$prevpos[order(blood2$prevpos, decreasing=FALSE)]),
names.arg=c(as.character(virus2$name[order(virus2$prevpos, decreasing=FALSE)]),
as.character(gut2$name[order(gut2$prevpos, decreasing=FALSE)]),
as.character(blood2$name[order(blood2$prevpos, decreasing=FALSE)])),
col=c(as.character(virus2$col[order(virus2$prevpos, decreasing=FALSE)]),
as.character(gut2$col[order(gut2$prevpos, decreasing=FALSE)]),
as.character(blood2$col[order(blood2$prevpos, decreasing=FALSE)])),
horiz=TRUE, las=1, main="FIV positive ", xlab="Prevalence", cex.names= 0.8)
drop <- c('THEILERIABABESIA', 'OTHER', 'BABESA')
alldata <- alldata[, !names(alldata) %in% drop]
plotdata <- plotdata[, !names(plotdata) %in% drop]
all<-make_edgelist(alldata)
all2<-make_all_matrix(alldata)  # for making parasite monoparte matrix
all3<-make_all_lionmatrix(alldata)
allb<-make_all_bipartite_matrix(alldata)
all_parnet<- tcrossprod(t(all2))  # nodes=parasites; edges=number of shared hosts, symmetric
all_lionnet<-tcrossprod(t(all3))
head(all_parnet)
ga<-graph.adjacency(all_parnet, mode="upper", weighted=TRUE) # undirected/named/weighted/self
ga
?modularity
multilevel.community(ga)
?get.adjacency
a<- get.adjacency(ga, type="both")
head(a)
a
write.csv(all_parnet, "/Users/gorsich/Documents/MATLAB/lionparasites.csv")
